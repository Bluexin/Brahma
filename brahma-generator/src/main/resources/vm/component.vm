#*
 * Copyright (C) 2019-2020 Arnaud 'Bluexin' Sol√©
 *
 * This file is part of Brahma-generator.
 *
 * Brahma-generator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Brahma-generator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Brahma-generator.  If not, see <https://www.gnu.org/licenses/>.
 *###
## @vtlvariable name="resolver" type="java.util.Map<java.lang.String, be.bluexin.brahma.generator.FieldType>"
## @vtlvariable name="component" type="be.bluexin.brahma.generator.data.Component"
## @vtlvariable name="imports" type="java.lang.String[]"
#macro(nullability $field $fieldInfo)
    #if($fieldInfo.useNullability)
        #if($field.nullable)
        @Nullable #{else}@NotNull #end
    #end
#end
#macro(capitalize $string)
    $string.substring(0, 1).toUpperCase()$string.substring(1, $string.length())#end
/*
* This class was generated by Brahma generator.
* Please do not edit directly.
*/

package $component.package;

import be.bluexin.brahma.SerializedComponent;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
#foreach($import in $imports)
    #if($foreach.first)

    #end
import $import;
#end

public final class $component.name extends SerializedComponent {
#foreach($field in $component.fields)
    #set($fieldInfo = $resolver.get($field.type))

    #**#    #nullability($field, $fieldInfo)private $fieldInfo.typeDef $field.name = $fieldInfo.default($field);

    #**#    #nullability($field, $fieldInfo)public $fieldInfo.typeDef get#capitalize($field.name)() {
return this.$field.name;
}

public void set#capitalize($field.name)(#nullability($field, $fieldInfo)final $fieldInfo.typeDef $field.name) {
this.$field.name = $field.name;
    #if(!$field.transient)
    this.dirty();
    #end
}
#end

@Override
public void reset() {
#foreach($field in $component.fields)
    #set($fieldInfo = $resolver.get($field.type))
    $fieldInfo.reset($field);
#end
}

@Override
public void serializeTo(@NotNull DataOutput outputStream) throws IOException {
#foreach($field in $component.fields)
    #if(!$field.transient)
        #set($fieldInfo = $resolver.get($field.type))
        $fieldInfo.serialize($field, "outputStream");
    #end
#end
}

@Override
public void deserializeFrom(@NotNull DataInput inputStream) throws IOException {
#foreach($field in $component.fields)
    #if(!$field.transient)
        #set($fieldInfo = $resolver.get($field.type))
        $fieldInfo.deserialize($field, "inputStream");
    #end
#end
}
}
